window.ikiToolkit = window.ikiToolkit || {};
window.ikiToolkit.admin = window.ikiToolkit.admin || {};
window.ikiToolkit.admin.ExternalApiValidator = (function ($) {

    "use strict";

    return {

        testFlickr: testFlickr,
        testDribbble: testDribbble,
        testPinterest: testPinterest,
        testFiveHundred: testFiveHundred,
        sendRequest: sendRequest,
        init: init,
        setNonce: setNonce,
        _sendRequest: sendRequest

    };


    function init() {

        this.defaultData = {
            flickr: '81703997@N00',
            pinterest: '',
            'fiveHundred': 'ikixxx',
            'dribbble': 'fantasy'
        };
        return this;
    }

    function setNonce(nonce) {
        this.nonce = nonce;
    }

    function testFlickr(username, photoset, apiKey, keyOnly) {

        if (keyOnly) {
            username = (username.trim()) ? username : this.defaultData.flickr;
        }

        var action = 'iki_check_external_data';
        var method = 'get_user';

        var d = {
            action: action,
            method: method,
            service: 'flickr',
            data: {
                'user_id': username,
                'cache': 'disabled'
            }
        };

        if (apiKey) {
            d.data.api_key = apiKey;
        }
        if (photoset.trim()) {
            d.method = 'get_photoset_info';
            d.data.photoset_id = photoset;
        }

        return this._sendRequest(d);
    }

    function testDribbble(username, apiKey, keyOnly) {

        if (keyOnly) {
            username = (username.trim()) ? username : this.defaultData.dribbble;
        }

        var action = 'iki_check_external_data';
        var method = 'get_user';

        var d = {
            action: action,
            method: method,
            service: 'dribbble',
            data: {
                'username': username,
                'cache': 'disabled'
            }
        };
        if (apiKey) {
            d.data.api_key = apiKey;
        }
        return this._sendRequest(d);
    }

    function testPinterest(username, board) {

        username = (username.trim()) ? username : this.defaultData.pinterest;

        var action = 'iki_check_external_data';
        var method = 'get_user_latest_pins';

        var d = {
            action: action,
            method: method,
            service: 'pinterest',
            data: {
                'user': username,
                'cache': 'disabled'
            }
        };

        if (board.trim()) {
            d.method = 'get_user_board';
            d.data.boardname = board;
        }

        return this._sendRequest(d);
    }

    function testFiveHundred(username, gallery, apiKey, keyOnly) {

        if (keyOnly) {
            username = (username.trim()) ? username : this.defaultData.fiveHundred;
        }

        var action = 'iki_check_external_data';
        var method = 'get_user';

        var d = {
            action: action,
            method: method,
            service: '500px',
            data: {
                'username': username,
                'cache': 'disabled'
            }
        };

        if (gallery.trim()) {
            d.method = 'get_user_gallery';
            d.data.gallery = gallery;
        }

        if (apiKey) {
            d.data.api_key = apiKey;
        }
        return this._sendRequest(d);
    }

    function sendRequest(data) {


        data._ajax_nonce = this.nonce;

        console.log("data");
        console.dir(data);
        var deferred = $.Deferred();
        $.ajax({
            type: 'POST',
            url: ajaxurl,
            dataType: 'json',
            timeout: 10000,
            data: data
        }).done(function (data, status, xhr) {

            if (0 === data) {

                deferred.reject(data);

            } else {

                data = JSON.parse(data);

                if ('failure' === data.status) {
                    deferred.reject(data);
                }
                else {
                    deferred.resolve(data);
                }
            }


        }).fail(function (data, status, xhr) {
            try {
                data = JSON.parse(data);
            } catch (e) {

            }
            deferred.reject(data, status, xhr);
        });

        return deferred.promise();
    }
}(jQuery));

jQuery(document).ready(function ($) {

    "use strict";
    var extValidator = Object.create(window.ikiToolkit.admin.ExternalApiValidator).init();
    // flickr api test
    var ajaxNonce = $('#iki-ajax-nonce').data('ikiNonce');
    extValidator.setNonce(ajaxNonce);

    var $flickrInput = $('#iki-flickr_api_key');
    var $flickrUI = $('#iki-test-flickr-api');

    var $flickrTestBtn = $flickrUI.children('.button');
    var $flickrSpinner = $flickrUI.children('.spinner');
    var $flickrSuccessField = $flickrUI.children('.updated');
    var $flickrErrorField = $flickrUI.children('.error');

    $flickrTestBtn.on('click', function (e) {

        e.preventDefault();
        $flickrTestBtn.prop('disabled', true);

        $flickrSuccessField.hide();
        $flickrErrorField.hide();

        var apiValue = $flickrInput.val();
        apiValue = (apiValue.trim()) ? apiValue : 'fake_key_force_error';
        var response = extValidator.testFlickr('', '', apiValue, true);

        response.always(function () {
            $flickrTestBtn.prop('disabled', false);
        });

        handleResponse(response, $flickrSpinner, $flickrSuccessField, $flickrErrorField);
    });

    /*DRIBBBLE TEST*/
    var $dribbbleInput = $('#iki-dribbble_api_key');
    var $dribbbleUI = $('#iki-test-dribbble-api');

    var $dribbbleTestBtn = $dribbbleUI.children('.button');
    var $dribbbleSpinner = $dribbbleUI.children('.spinner');
    var $dribbbleSuccessField = $dribbbleUI.children('.updated');
    var $dribbbleErrorField = $dribbbleUI.children('.error');

    $dribbbleTestBtn.on('click', function (e) {

        e.preventDefault();

        $dribbbleTestBtn.prop('disabled', true);

        $dribbbleSuccessField.hide();
        $dribbbleErrorField.hide();

        var apiValue = $dribbbleInput.val();
        apiValue = (apiValue.trim()) ? apiValue : 'fake_key_force_error';

        var response = extValidator.testDribbble('', apiValue, true);

        response.always(function () {
            $dribbbleTestBtn.prop('disabled', false);
        });

        handleResponse(response, $dribbbleSpinner, $dribbbleSuccessField, $dribbbleErrorField);
    });


    /*FIVEHUNDRED PX TEST*/
    var $fiveInput = $('#iki-500px_api_key');
    var $fiveUI = $('#iki-test-five-api');

    var $fiveTestBtn = $fiveUI.children('.button');
    var $fiveSpinner = $fiveUI.children('.spinner');
    var $fiveSuccessField = $fiveUI.children('.updated');
    var $fiveErrorField = $fiveUI.children('.error');

    $fiveTestBtn.on('click', function (e) {

        e.preventDefault();

        $fiveTestBtn.prop('disabled', true);

        $fiveSuccessField.hide();
        $fiveErrorField.hide();

        var apiValue = $fiveInput.val();
        apiValue = (apiValue.trim()) ? apiValue : 'fake_key_force_error';

        var response = extValidator.testFiveHundred('', '', apiValue, true);

        response.always(function () {
            $fiveTestBtn.prop('disabled', false);
        });

        handleResponse(response, $fiveSpinner, $fiveSuccessField, $fiveErrorField);
    });

    function handleResponse(response, $spinner, $successField, $errorField) {

        $spinner.css('visibility', 'visible');

        response.done(function (data) {

            $successField.show();
            $successField.text($spinner.data('ikiSuccess'));

        }).fail(function (data) {
            console.log("fail data");
            console.dir(data);
            if (data.statusText && 'timeout' === data.statusText) {

                $errorField.text($spinner.data('ikiTimeout'));

            } else {

                $errorField.text($spinner.data('ikiFailure'));
            }

            $successField.text('');
            $errorField.show();

        }).always(function () {
            $spinner.css('visibility', 'hidden');
        });

    }


});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
